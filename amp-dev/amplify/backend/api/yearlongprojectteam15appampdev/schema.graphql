type User @model @auth(rules: [{allow: public}]){
  id: ID! @primaryKey
  email: String!
  name: String!
  dateJoined: String
  sentFriendRequests: [FriendRequest] @hasMany(indexName: "bySender", fields: ["id"])
  receivedFriendRequests: [FriendRequest] @hasMany(indexName: "byReceiver", fields: ["id"])
  sentVideoMessages: [VideoMessage] @hasMany(indexName: "bySender", fields: ["id"])
  receivedVideoMessages: [VideoMessage] @hasMany(indexName: "byReceiver", fields: ["id"])
}


type FriendRequest @model @auth(rules: [{allow: public}]){
  id: ID! @primaryKey
  date: AWSDateTime!
  status: FriendRequestStatus
  sender: User @belongsTo(fields: ["senderID"])
  senderID: ID! @index(name: "bySender")
  receiver: User @belongsTo(fields: ["receiverID"])
  receiverID: ID! @index(name: "byReceiver")
}

enum FriendRequestStatus {
  Pending
  Accepted
  Declined
}

type VideoMessage @model @auth(rules: [{allow: public}]){
  id: ID! @primaryKey #s3key
  date: AWSDateTime!
  title: String
  description: String
  message: String
  sender: User @belongsTo(fields: ["senderID"])
  senderID: ID! @index(name: "bySender")
  receiver: User @belongsTo(fields: ["receiverID"])
  receiverID: ID! @index(name: "byReceiver")
}


